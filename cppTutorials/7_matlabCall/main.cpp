/**
 * mht
 *
 * all these code files are generated by matlab. Looks amazing but a little bit handcraft coding is still needed since matlab c++ codes are not so generic.
 * 
 * this is an example of image smoothing app writen on matlab, and called on MSVC. All project configurations has been set.
 */


//
// File: main.cpp
//
// MATLAB Coder version            : 4.1
// C/C++ source code generated on  : 14-May-2019 18:54:44
//

//***********************************************************************
// This automatically generated example C main file shows how to call
// entry-point functions that MATLAB Coder generated. You must customize
// this file for your application. Do not modify this file directly.
// Instead, make a copy of this file, modify it, and integrate it into
// your development environment.
//
// This file initializes entry-point function arguments to a default
// size and value before calling the entry-point functions. It does
// not store or use any values returned from the entry-point functions.
// If necessary, it does pre-allocate memory for returned values.
// You can use this file as a starting point for a main function that
// you can deploy in your application.
//
// After you copy the file, and before you deploy it, you must make the
// following changes:
// * For variable-size function arguments, change the example sizes to
// the sizes that your application requires.
// * Change the example values of function arguments to the values that
// your application requires.
// * If the entry-point functions return values, store these values or
// otherwise use them as required by your application.
//
//***********************************************************************
// Include Files
#include <string>
#include "rt_nonfinite.h"
#include "smoother.h"
#include "main.h"
#include "smoother_terminate.h"
#include "smoother_emxAPI.h"
#include "smoother_initialize.h"

// Function Declarations
static void argInit_1x9_char_T(char result[9]);
static char argInit_char_T();
static void main_smoother();

// Function Definitions

//
// Arguments    : char result[9]
// Return Type  : void
//
static void argInit_1x9_char_T(char result[9])
{
  int idx1;
  std::string pth = "jerry.jpg";
  // Loop over the array to initialize each element.
  for (idx1 = 0; idx1 < 9; idx1++) {
    // Set the value of the array element.
    // Change this value to the value that the application requires.
    result[idx1] = pth.at(idx1);
  }
}

//
// Arguments    : void
// Return Type  : char
//
static char argInit_char_T()
{
  return '?';
}

//
// Arguments    : void
// Return Type  : void
//
static void main_smoother()
{
  emxArray_uint8_T *output_args;
  char cv0[9];
  emxInitArray_uint8_T(&output_args, 3);

  // Initialize function 'smoother' input arguments.
  // Initialize function input argument 'pth'.
  // Call the entry-point 'smoother'.
  argInit_1x9_char_T(cv0);
  smoother(cv0, output_args);
  emxDestroyArray_uint8_T(output_args);
}

//
// Arguments    : int argc
//                const char * const argv[]
// Return Type  : int
//
int main(int, const char * const [])
{
  // Initialize the application.
  // You do not need to do this more than one time.
  smoother_initialize();

  // Invoke the entry-point functions.
  // You can call entry-point functions multiple times.
  main_smoother();

  // Terminate the application.
  // You do not need to do this more than one time.
  smoother_terminate();
  return 0;
}

//
// File trailer for main.cpp
//
// [EOF]
//
